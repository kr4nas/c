#include <ESP8266WiFi.h>
#include <Keypad.h>
#include <Wire.h>
#include <hd44780.h>
#include <hd44780ioClass/hd44780_I2Cexp.h>
#include <ArduinoJson.h>

// === Wi-Fi ===
const char* ssid = "realme11";
const char* password_wifi = "13456890";

// === Клавиатура ===
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {5, 4, 0, 2};    // D1, D2, D3, D4
byte colPins[COLS] = {14, 12, 13, 15}; // D5, D6, D7, D8
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// === LCD ===
hd44780_I2Cexp lcd;

// === Пароль ===
char enteredPassword[4];
int passwordIndex = 0;

// === Сервер Beget ===
const char* serverHost = "v90117uf.beget.tech";
const int serverPort = 80;

// === Легковесный веб-сервер ===
#include <ESP8266WebServer.h>
ESP8266WebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>Вход</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    * { margin:0; padding:0; box-sizing:border-box; }
    body {
      font-family: Arial, sans-serif;
      background: #f7f9f9;
      padding: 20px;
    }
    .form {
      background: white;
      border-radius: 20px;
      padding: 40px 30px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      max-width: 420px;
      margin: 0 auto;
    }
    h3 {
      font-size: 26px;
      text-align: center;
      margin-bottom: 24px;
      color: #333;
    }
    label {
      font-size: 18px;
      display: block;
      margin: 12px 0 6px;
      color: #444;
    }
    input {
      width: 100%;
      padding: 14px 12px;
      font-size: 18px;
      border: 1px solid #ccc;
      border-radius: 10px;
      background: #fafafa;
    }
    input:focus {
      border-color: #aec8ff;
      outline: none;
      box-shadow: 0 0 0 3px rgba(174,200,255,0.3);
    }
    button {
      background: #c2e4f1;
      color: white;
      font-size: 20px;
      font-weight: bold;
      padding: 16px;
      border: none;
      border-radius: 10px;
      width: 100%;
      margin-top: 20px;
      cursor: pointer;
    }
    button:hover {
      background: #a6cfe5;
    }
    @media (max-width: 480px) {
      .form { padding: 20px; }
      h3 { font-size: 24px; }
      input, button { font-size: 18px; }
    }
  </style>
</head>
<body>
  <div class="form">
    <h3>Авторизация</h3>
    <form action="/login" method="POST">
      <label>Логин:</label>
      <input name="login" required>
      <label>Пароль:</label>
      <input type="password" name="password" required>
      <button type="submit">Войти</button>
    </form>
  </div>
</body>
</html>
)rawliteral";

// === Кастомные символы ===
byte char_P[] = {0x1f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00};
byte char_m_l[] = {0x00, 0x00, 0x0f, 0x09, 0x09, 0x09, 0x11, 0x00};
byte char_m_b[] = {0x00, 0x00, 0x10, 0x1e, 0x11, 0x11, 0x1e, 0x00};
byte char_m_p[] = {0x00, 0x00, 0x1f, 0x11, 0x11, 0x11, 0x11, 0x00};
byte char_m_sh[] = {0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x1f, 0x00};
byte char_m_shb[] = {0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x1f, 0x01};
byte char_m_n[] = {0x00, 0x00, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x00};
byte char_m_z[] = {0x00, 0x00, 0x1e, 0x01, 0x0e, 0x01, 0x1e, 0x00};

void setupLCD() {
  Wire.begin(3, 1); // SDA = GPIO3 (D9), SCL = GPIO1 (D10)
  if (lcd.begin(16, 2) != 0) {
    while (true);
  }
  lcd.createChar(0, char_P);
  lcd.createChar(1, char_m_l);
  lcd.createChar(2, char_m_b);
  lcd.createChar(3, char_m_p);
  lcd.createChar(4, char_m_sh);
  lcd.createChar(5, char_m_shb);
  lcd.createChar(6, char_m_n);
  lcd.createChar(7, char_m_z);
  lcd.setCursor(0, 0);
  lcd.write(byte(0));
  lcd.print("apo");
  lcd.write(byte(1));
  lcd.write(byte(2));
  lcd.print(":");
}

// === Отправка пароля на сервер и логирование ===
void checkPasswordAndLog(String password) {
  WiFiClient client;
  if (!client.connect(serverHost, serverPort)) {
    lcd.setCursor(0, 1);
    lcd.print("no conn");
    delay(1500);
    lcd.setCursor(0, 1);
    lcd.print("        ");
    return;
  }

  String req = "GET /check_and_log.php?password=" + password + " HTTP/1.1\r\n";
  req += "Host: " + String(serverHost) + "\r\n";
  req += "Connection: close\r\n\r\n";
  client.print(req);

  unsigned long timeout = millis();
  while (!client.available() && millis() - timeout < 5000) delay(1);

  // Пропускаем заголовки
  while (client.available()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") break;
  }

  // Читаем тело (ограничим 256 байт)
  char response[256] = {0};
  int len = client.readBytes(response, 255);
  client.stop();

  // Ищем JSON
  char* jsonStart = strstr(response, "{");
  if (!jsonStart) return;

  DynamicJsonDocument doc(128);
  DeserializationError err = deserializeJson(doc, jsonStart);
  if (err) return;

  String status = doc["status"];
  lcd.setCursor(0, 1);
  lcd.print("          ");
  lcd.setCursor(0, 1);
  if (status == "разрешен") {
    lcd.print("Pa");
    lcd.write(byte(7));
    lcd.print("pe");
    lcd.write(byte(4));
    lcd.print("e");
    lcd.write(byte(6));
    lcd.print("o.");
  } else {
    lcd.print("3a");
    lcd.write(byte(3));
    lcd.print("pe");
    lcd.write(byte(5));
    lcd.print("e");
    lcd.write(byte(6));
    lcd.print("o.");
  }
  delay(1500);
  passwordIndex = 0;
  enteredPassword[0] = '\0';
  lcd.setCursor(0, 1);
  lcd.print("          ");
}

// === Обработчики веб-сервера ===
void handleRoot() {
  server.send_P(200, "text/html", index_html);
}

void handleLogin() {
  if (!server.hasArg("login") || !server.hasArg("password")) {
    server.send(400, "text/html", "<h3 style='color: red;'>❌ Заполните все поля</h3><br><a href='/'>← Назад</a>");
    return;
  }

  String login = server.arg("login");
  String password = server.arg("password");

  WiFiClient client;
  if (!client.connect(serverHost, serverPort)) {
    server.send(500, "text/html", "<h3 style='color: red;'>❌ Нет связи с сервером</h3><br><a href='/'>← Назад</a>");
    return;
  }

  String req = "GET /api.php?action=check_admin&login=" + login + "&password=" + password + " HTTP/1.1\r\n";
  req += "Host: " + String(serverHost) + "\r\n";
  req += "Connection: close\r\n\r\n";
  client.print(req);

  unsigned long timeout = millis();
  while (!client.available() && millis() - timeout < 5000) delay(1);

  // Пропускаем заголовки
  while (client.available()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") break;
  }

  // Читаем тело
  char response[128] = {0};
  client.readBytes(response, 127);
  client.stop();

  char* jsonStart = strstr(response, "{");
  if (!jsonStart) {
    server.send(500, "text/html", "<h3 style='color: red;'>❌ Ошибка ответа сервера</h3><br><a href='/'>← Назад</a>");
    return;
  }

  DynamicJsonDocument doc(96);
  DeserializationError err = deserializeJson(doc, jsonStart);
    if (err || !doc["result"]) {
    // ❌ Крупное сообщение "Доступ запрещён"
    String html = R"rawliteral(
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Ошибка</title>
        <style>
          * { margin:0; padding:0; box-sizing:border-box; }
          body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 40px 20px;
            color: #d32f2f;
          }
          h3 {
            font-size: 28px;
            margin: 20px 0;
          }
          p {
            font-size: 20px;
            color: #555;
            margin: 10px 0 20px;
          }
          a {
            color: #1976d2;
            text-decoration: none;
            font-size: 30px;
          }
          @media (max-width: 480px) {
            h3 { font-size: 26px; }
            p, a { font-size: 16px; }
          }
        </style>
      </head>
      <body>
        <h3>❌ Доступ запрещён</h3>
        <p>Неверные данные или недостаточно прав.</p>
        <a href="/">← Вернуться к авторизации</a>
      </body>
      </html>
    )rawliteral";
    server.send(401, "text/html", html);
    return;
  }

  // ✅ Всё хорошо — перенаправляем
  server.sendHeader("Location", "http://v90117uf.beget.tech/index.html", true);
  server.send(302, "text/plain", "");
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password_wifi);

  // Инициализируем LCD
  Wire.begin(3, 1);
  if (lcd.begin(16, 2) != 0) {
    while (true);
  }

  // Очищаем экран, готовимся к выводу IP
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("IP-address:");

  // Ждём подключения к Wi-Fi
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Получаем IP
  IPAddress ip = WiFi.localIP();

  // Выводим IP на второй строке
  lcd.setCursor(0, 1);
  lcd.print(ip.toString().c_str());

  delay(15000); // Показываем 10 секунд

  // === ВАЖНО: Запускаем веб-сервер ===
  server.on("/", HTTP_GET, handleRoot);
  server.on("/login", HTTP_POST, handleLogin);
  server.begin();  // ← Запуск сервера

  // Восстанавливаем основной интерфейс
  setupLCD();
  passwordIndex = 0;
  enteredPassword[0] = '\0';
  lcd.setCursor(0, 1);
  lcd.print("        ");
}

void loop() {
  server.handleClient();

  char key = keypad.getKey();
  if (key != NO_KEY) {
    if (key == '#') {
      passwordIndex = 0;
      enteredPassword[0] = '\0';
      lcd.setCursor(0, 1);
      lcd.print("        ");
      lcd.setCursor(0, 1);
    } else if (key == '*') {
      enteredPassword[passwordIndex] = '\0';
      checkPasswordAndLog(String(enteredPassword));
    } else if (passwordIndex < 3) {
      enteredPassword[passwordIndex++] = key;
      lcd.setCursor(passwordIndex - 1, 1);
      lcd.print(key);
    }
  }
}